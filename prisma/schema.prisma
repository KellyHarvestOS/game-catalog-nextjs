// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// --- Модели для NextAuth.js ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?   // Можно использовать для URL аватарки
  role           String    @default("USER")

  accounts       Account[]       // Связь с Account
  sessions       Session[]       // Связь с Session
  purchasedGames PurchasedGame[] // Связь с купленными играми
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Модели для вашего приложения ---
model Game {
  id               String   @id @default(cuid())
  title            String
  description      String   @db.Text
  genre            String?
  platform         String?
  developer        String?
  publisher        String?
  releaseDate      DateTime?
  price            Float?
  coverImageUrl    String?
  screenshots      Screenshot[]   // Связь с моделью Screenshot
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  purchasedByUsers PurchasedGame[]

  @@index([title])
  @@index([genre])
}

model Screenshot {
  id     String @id @default(cuid())
  url    String
  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId])
}

model PurchasedGame {
  id          String   @id @default(cuid())
  userId      String
  gameId      String
  purchasedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@index([userId])
  @@index([gameId])
}